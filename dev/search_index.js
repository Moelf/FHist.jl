var documenterSearchIndex = {"docs":
[{"location":"#FHist","page":"Introduction","title":"FHist","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Modules = [FHist]","category":"page"},{"location":"#FHist.Hist1D-Tuple{Any, AbstractRange}","page":"Introduction","title":"FHist.Hist1D","text":"Hist1D(array, edges::AbstractRange; kwgs...)\nHist1D(array, edges::AbstractVector; error_mode=:sqrt)\n\nCreate a Hist1D with given bin edges and vlaues from array. Weight for each value is assumed to be 1.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.Hist1D-Tuple{Any, StatsBase.AbstractWeights, AbstractRange}","page":"Introduction","title":"FHist.Hist1D","text":"Hist1D(array, wgts::AbstractWeights, edges::AbstractRange, ; kwgs...)\nHist1D(array, wgts::AbstractWeights, edges::AbstractVector; error_mode=:sqrt)\n\nCreate a Hist1D with given bin edges and vlaues from array. wgts should have the same size as array.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.Hist1D-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Introduction","title":"FHist.Hist1D","text":"Hist1D(A::AbstractVector{T}; nbins::Integer=StatsBase.sturges(length(A)), error_mode=:sqrt) where T\nHist1D(A::AbstractVector{T}, wgts::AbstractWeights; nbins::Integer=StatsBase.sturges(length(A)), error_mode=:sqrt) where T\n\nAutomatically determine number of bins based on Sturges algo.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.Hist1D-Union{Tuple{StatsBase.Histogram{T, 1, E}}, Tuple{E}, Tuple{T}} where {T, E}","page":"Introduction","title":"FHist.Hist1D","text":"Hist1D(h::Histogram{T, 1, E}; error_mode=:sqrt) where {T,E}\n\nConvert an existing 1D StatsBase.Histogram to a Hist1D. Adds error according to error_mode.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.Hist1D-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"Introduction","title":"FHist.Hist1D","text":"Hist1D(elT::Type{T}=Float64; binedges) where {T}\n\nInitialize an empty histogram with bin content typed as T and bin edges. To be used with push!\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Union{Tuple{E}, Tuple{T}, Tuple{Hist1D{T, E}, Real}, Tuple{Hist1D{T, E}, Real, Real}} where {T, E}","page":"Introduction","title":"Base.push!","text":"push!(h::Hist1D, val::Real, wgt::Real=one{T})\n\nAdding one value at a time into histogram. Remember to call update_error! after if you need errors.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.update_error!","page":"Introduction","title":"FHist.update_error!","text":"update_error!(h::Hist1D, error_fun = sqrt_err)\n\nUpdate the error (up and down) of a histogram according to a specific error_mode. Remember to call this function after updaing a histogram with push!() in a loop.\n\n\n\n\n\n","category":"function"}]
}
