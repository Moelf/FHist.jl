var documenterSearchIndex = {"docs":
[{"location":"api/","page":"APIs","title":"APIs","text":"Modules = [FHist]","category":"page"},{"location":"api/#FHist.Hist1D-Tuple{Any, StatsBase.AbstractWeights, AbstractRange}","page":"APIs","title":"FHist.Hist1D","text":"Hist1D(array, wgts::AbstractWeights, edges::AbstractRange)\nHist1D(array, wgts::AbstractWeights, edges::AbstractVector)\n\nCreate a Hist1D with given bin edges and vlaues from array. wgts should have the same size as array.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.Hist1D-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"APIs","title":"FHist.Hist1D","text":"Hist1D(A::AbstractVector{T}; nbins::Integer=StatsBase.sturges(length(A))) where T\nHist1D(A::AbstractVector{T}, wgts::AbstractWeights; nbins::Integer=StatsBase.sturges(length(A))) where T\n\nAutomatically determine number of bins based on Sturges algo.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.Hist1D-Union{Tuple{T}, Tuple{AbstractVector{T} where T, AbstractRange{T}}} where T<:AbstractFloat","page":"APIs","title":"FHist.Hist1D","text":"Hist1D(array, edges::AbstractRange)\nHist1D(array, edges::AbstractVector)\n\nCreate a Hist1D with given bin edges and vlaues from array. Weight for each value is assumed to be 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.Hist1D-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"APIs","title":"FHist.Hist1D","text":"Hist1D(elT::Type{T}=Float64; binedges) where {T}\n\nInitialize an empty histogram with bin content typed as T and bin edges. To be used with push!\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Union{Tuple{E}, Tuple{T}, Tuple{Hist1D{T, E}, Real, Real}} where {T, E}","page":"APIs","title":"Base.push!","text":"push!(h::Hist1D, val::Real)\npush!(h::Hist1D, val::Real, wgt::Real=one{T})\n\nAdding one value at a time into histogram. If wgt is supplied , this operation will accumulate sumw2 (sum of weights^2) in the Hist automatically.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.bincenters-Tuple{Hist1D}","page":"APIs","title":"FHist.bincenters","text":"bincenters(h::Hist1D)\n\nGet the bin centers of a histogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.hists_to_bars-Tuple{Any}","page":"APIs","title":"FHist.hists_to_bars","text":"hists_to_bars(hist1ds)\n\nGiven a vector of Hist1D, return edges (xs), heights (ys), and grps (for grouping) that is useful for plotting stacked histogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#FHist.sample-Tuple{Hist1D}","page":"APIs","title":"FHist.sample","text":"sample(h::Hist1D)\nsample(h::Hist1D, n::Int)\n\nSample a histogram's with weights equal to bin count, one or n times. The returned sample value will be one of the bin's left edge.\n\n\n\n\n\n","category":"method"},{"location":"#FHist.jl","page":"Introduction","title":"FHist.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Dev) (Image: Build Status) (Image: Codecov)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Fast, error-aware, and thread-safe 1&2D histograms that are also compatible with StatsBase.Histogram","category":"page"},{"location":"#Quick-Start","page":"Introduction","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> a = randn(1000);\n\n\njulia> h1 = Hist1D(a);\n\njulia> h2 = Hist1D(Int; bins=-3:0.5:3)\n\njulia> Threads.@threads for i in a\n           push!(h2, i)\n       end\n\njulia> h1 == h2\ntrue","category":"page"}]
}
